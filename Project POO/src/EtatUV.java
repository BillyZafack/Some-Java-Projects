import java.awt.Desktop;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.GroupLayout;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.PageSize;
import com.lowagie.text.Table;
import com.lowagie.text.pdf.PdfWriter;


public class EtatUV extends JDialog implements ActionListener{


    // Variables declaration - do not modify
	/** Bouton de retour*/
    private javax.swing.JButton Retour;
    /** Raccourcis affichant l'aide */
    private javax.swing.JLabel aide;
    private javax.swing.JLabel etatetdetd;
    private javax.swing.JTextField etds;
    /** Bouton qui permet l'imprimer de l'etat*/
    private javax.swing.JButton imprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel statistiques;
    /** Table des etats*/
    private javax.swing.JTable table;

    // End of variables declaration
/**
 * Constructeur de la fenetre
 * @param parent Fenetre JFrame parent
 * @param modal rends la boite de dialogue modal ou non
 * @param a change entre l'execution de tout kes Uvs et les etudiants pour une UVs
 */
	public EtatUV(java.awt.Frame parent, boolean modal,int a) {
        super(parent, modal);

		if(a==1)
		{
        initComponents(1);
		}
		else
		{
			initComponents(2);
		}
		this.etds.setText(Integer.toString(table.getRowCount()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(int j) {

        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Retour = new javax.swing.JButton();
        imprimer = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        statistiques = new javax.swing.JLabel();
        etatetdetd = new javax.swing.JLabel();
        aide = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        etds = new javax.swing.JTextField();

        jLabel14.setText("Vous voulez acceder a un logiciel qui a acces a une as de donnees securisee. Veuillez vous identifier en tant que proprietaire de cette base de donnees.");

        jPanel1.setPreferredSize(new java.awt.Dimension(799, 559));

        Retour.setText("Retour");

        imprimer.setText("Imprimer");
        this.statistiques.addMouseListener(new mouse());
        this.aide.addMouseListener(new mouse());
        this.etatetdetd.addMouseListener(new mouse());


        jLabel10.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jLabel10.setText("LISTE DES UVS");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Code De L'UV", "Intitule De L'UV", "Nombre De Credits"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            @Override
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        if(j==1)
        {
        	int uvs=0;
        	Retour.addActionListener(this);
        	imprimer.addActionListener(this);
        	TableModel model = null;
        	JPanel p=new JPanel(new GridBagLayout());
        	try{
        	Statement stmt =WindowPrime.getConnection().createStatement();
        	ResultSet r=stmt.executeQuery("SELECT Code_UV,Intitule_UV FROM UV");
        	while(r.next())
        	{
        		uvs++;
        	}
        	String[] s={"Code De L/'UV","Intitule De L/'UV"};
        	model=new DefaultTableModel(s,uvs);
        	r.beforeFirst();
        	int i=0;
        	while(r.next())
        	{
        		model.setValueAt(r.getString("Code_UV"), i, 0);
        		model.setValueAt(r.getString("Intitule_UV"), i, 1);
        		i++;
        	}
        	}
        	catch(SQLException e1)
        	{
        		e1.printStackTrace();
        	}
        	table=new JTable(model);
        }
        else if (j==2)
        {
        	Retour.addActionListener(this);
        	imprimer.addActionListener(this);
        	String s=JOptionPane.showInputDialog(this, "Entrez le matricule de l'etudiant pour lequel vous voulez les unites de valeurs", "IDENTIfICATION DE L'ETUDIANT", JOptionPane.OK_CANCEL_OPTION);
        	int id=getEtdID(s);
        	if(id==-1)
        	{
        		JOptionPane.showMessageDialog(this, "Cet etudiant n'existe pas !!", "Etudiant Inexistant", JOptionPane.OK_OPTION);

        	}
        	else
        	{
        		Vector<String> vec=getUVList(id);
        		for(int i=0;i<vec.size();i++)
        		{
        			System.out.println(vec.get(i));
        		}
        		JPanel pan = new JPanel();
        		pan.setLayout(new GroupLayout(pan));
        		String[] s1={"Code De L'UV","Intitule De L'UV"};
        		TableModel model = new DefaultTableModel(s1,vec.size());
        		for(int i=0;i<vec.size();i++)
        		{
        			model.setValueAt(getUVID(vec.get(i)), i, 0);
        			model.setValueAt(vec.get(i), i, 1);
        		}
        		table = new JTable(model);
        	}
        }
        jScrollPane1.setViewportView(table);

        jLabel1.setText("RACCOURCIS PRATIQUES");

        statistiques.setForeground(new java.awt.Color(255, 51, 51));
        statistiques.setText("- Statistiques");

        etatetdetd.setForeground(new java.awt.Color(255, 51, 51));
        etatetdetd.setText("- Traitement des UVs");

        aide.setForeground(new java.awt.Color(255, 51, 51));
        aide.setText("- Aide Contextuelle");

        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("- Etats Des Etudiants");

        etds.setEditable(false);
this.setSize(1102,788);
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(imprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Retour)
                .addGap(134, 134, 134))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(aide)
                            .addComponent(etatetdetd)
                            .addComponent(statistiques)
                            .addComponent(jLabel1))
                        .addGap(644, 644, 644))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(356, 356, 356))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(etds, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(statistiques)
                .addGap(18, 18, 18)
                .addComponent(etatetdetd)
                .addGap(11, 11, 11)
                .addComponent(aide)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(etds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imprimer)
                    .addComponent(Retour))
                .addGap(237, 237, 237))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>

        /**
        *
        * @param mat qui est le matricule de l'étudiant
        * @return int qui est l'identificateur de l'étudiant de l'étudiant de matricule mis en parametre
        *  Cette méthode nous permet d'obtenir l'identificateur d'un étudiant a partir de son matricule.
        */
        	 public int getEtdID(String mat)
        	 {
        		 int i=0;
        	 	ResultSet s;
        	 	try
        	 	{
        	 		Statement stmt=WindowPrime.getConnection().createStatement();
        	 		s=stmt.executeQuery("SELECT EtudiantID FROM Etudiant WHERE Matricule= '"+mat+"';");
        	 		if(s.next())
        	 		{
        	 		i=s.getInt("EtudiantID");
        	 		}
        	 		else
        	 		{
        	 			i=-1;
        	 		}
        	 	}
        	 	catch(SQLException e)
        	 	{
        	 		e.printStackTrace();
        	 	}
        	 	return i;
        	 }
        /**
  	  *
  	  * @param id
  	  * @return Vector<String> qui contient la liste des UVs de l'étudiant d'identificateur id(mis en parametre).
  	  *  Cette methode nous permet de recuperer la liste des UVs a partir de son identificateur.
  	  */
  	 public Vector<String> getUVList(int id)
  	 {
  		 Vector<String> v=new Vector<String>();
  		 Vector<String> v1=new Vector<String>();
  		 try{
  		 PreparedStatement stmt=WindowPrime.getConnection().prepareStatement("SELECT UVID FROM EtudiantUV WHERE EtudiantID= ?");
  		 stmt.setInt(1, id);
  		 ResultSet r=stmt.executeQuery();
  		 System.out.println(r.next());
  		 r.beforeFirst();
  		 while(r.next())
  		 {
  			 v1.add(Integer.toString(r.getInt("UVID")));
  		 }
  		ResultSet a;
  		 for(int i=0;i<v1.size();i++)
  		 {
  			a=stmt.executeQuery("SELECT Intitule_UV FROM UV WHERE UVID="+Integer.parseInt(v1.get(i)));
 			 a.next();
 			 v.add(a.getString("Intitule_UV"));
  		 }
  		 }
  		 catch(SQLException e2)
  		 {
  			 e2.printStackTrace();
  		 }
  		 return v;
  	 }

  	 /**
  	  *
  	  * @param mat Le matricule de l'étudiant
  	  * @return int qui est l'identificateur de l'étudiant avec le matricule mat mis en parametre
  	  */
  	 public int getUVID(String mat)
  	 {
  		 int i=0;
  		 try{
  		 Statement stmt=WindowPrime.getConnection().createStatement();
  		 ResultSet r=stmt.executeQuery("SELECT UVID FROM UV WHERE Code_UV='"+mat+"';");
  		 if(r.next()) {

  		 i=r.getInt("UVID");
  		 }
  		 }
  		 catch(SQLException s)
  		 {
  			 s.printStackTrace();
  		 }
  		 return i;
  	 }
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource()==imprimer)
		{
			int k=0;

			try{
	        	Statement stmt =WindowPrime.getConnection().createStatement();
	        	ResultSet r=stmt.executeQuery("SELECT Code_UV,Intitule_UV FROM UV");
	        	while(r.next())
	        	{
	        		k++;
	        	}
			}
			catch(SQLException d)
			{
				d.printStackTrace();
			}
		Document document = new Document(PageSize.A4);
		float[] don={9,9};
	    try {
	      PdfWriter.getInstance(document, new FileOutputStream(".\\EtatEtudiant.pdf"));
	      document.open();
	      Table tableau = new Table(2,k);

	      for(int i=0;i<k;i++)
	      {
	      tableau.addCell((String)table.getValueAt(i, 0));
	      tableau.addCell((String)table.getValueAt(i, 1));

	      }
	      document.add(tableau);


	    } catch (DocumentException de) {
	      de.printStackTrace();
	    } catch (IOException ioe) {
	      ioe.printStackTrace();
	    }

	    document.close();
	    File f = new File(".\\EtatEtudiant.pdf");

	    try {
	    	Desktop.getDesktop().open(f);
	    } catch (IOException e1) {
	    	// TODO Auto-generated catch block
	    	e1.printStackTrace();
	    }
		}
		if(e.getSource()==Retour)
		{
			this.setVisible(false);
		}
	}
	class mouse implements MouseListener{

		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub
		if(e.getSource()==aide)
		{
			JOptionPane.showMessageDialog(EtatUV.this, "AIDE CONTEXTUELLE\n -Ici vous pouvez consulter la liste d'UV correspondant.\n Vous pouvez imprimer avec le bouton \'Imprimer\' et retourner a la fenetre principale ave le bouton \'Retour\'", "AIDE CONTEXTUELLE", JOptionPane.PLAIN_MESSAGE);
		}

		if(e.getSource()==statistiques)
		{
		int k=0;
			k=EtatUV.this.table.getRowCount();
			EtatUV.this.etds.setText(Integer.toString(k));
			JOptionPane.showMessageDialog(EtatUV.this, "STATISTIQUES\n -Nombre d'UVs: "+k, "STATISTIQUES", JOptionPane.PLAIN_MESSAGE );
		}
		if(e.getSource()==etatetdetd)
		{
			EtatUV.this.setVisible(false);
			EtatUV.this.getParent().setVisible(false);
			new InscriptionPm(new WindowPrime(),true).setVisible(true);
		}
		if(e.getSource()==jLabel2)
		{
			EtatUV.this.setVisible(false);
			EtatUV.this.getParent().setVisible(false);
			new EtatEtudiant(new WindowPrime(),true,1).setVisible(true);
		}
		}

		@Override
		public void mouseEntered(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseExited(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mousePressed(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

	}

}
